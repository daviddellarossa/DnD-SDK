//------------------------------------------------------------------------------
// <auto-generated>
// Code auto-generated by CategoryGenerator version <version undefined>.
// Re-run the generator every time a new Message is added or removed.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using UnityEditor;
using MessageBroker;

namespace DeeDeeR.MessageBroker
{
    /// <summary>
    /// 
    /// </summary>
    public class LoadGameEventArgs : MessageBrokerEventArgs, IResettable
    {
        public Infrastructure.SaveManager.SaveGameData SaveGameData { get; set; }

        /// <inheritdoc cref = "IResettable.ResetState"/>
        public void ResetState()
        {
            this.SaveGameData = default;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public class MBMenus
    {
        /// <summary>
        /// 
        /// </summary>
        public event EventHandler<MessageBrokerEventArgs> OnBackToMainMenu;
        /// <summary>
        /// 
        /// </summary>
        public event EventHandler<LoadGameEventArgs> OnLoadGame;
        /// <summary>
        /// 
        /// </summary>
        public event EventHandler<MessageBrokerEventArgs> OnLoadLatestGame;
        /// <summary>
        /// 
        /// </summary>
        public event EventHandler<MessageBrokerEventArgs> OnQuitGame;
        /// <summary>
        /// 
        /// </summary>
        public event EventHandler<MessageBrokerEventArgs> OnStartGame;
        /// <summary>
        /// 
        /// </summary>
        public void Send_OnBackToMainMenu(object sender, object target)
        {
            if (sender == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Menus", target, "sender");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            if (target == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Menus", target, "target");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            var __eventArgs__ = MessageBrokerEventArgs.Pool<MessageBrokerEventArgs>.Rent();
            __eventArgs__.Sender = sender;
            __eventArgs__.Target = target;
            OnBackToMainMenu?.Invoke(sender, __eventArgs__);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Send_OnLoadGame(object sender, object target, Infrastructure.SaveManager.SaveGameData saveGameData)
        {
            if (sender == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Menus", target, "sender");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            if (target == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Menus", target, "target");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            if (saveGameData == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Menus", target, "saveGameData");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            var __eventArgs__ = MessageBrokerEventArgs.Pool<LoadGameEventArgs>.Rent();
            __eventArgs__.Sender = sender;
            __eventArgs__.Target = target;
            __eventArgs__.SaveGameData = saveGameData;
            OnLoadGame?.Invoke(sender, __eventArgs__);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Send_OnLoadLatestGame(object sender, object target)
        {
            if (sender == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Menus", target, "sender");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            if (target == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Menus", target, "target");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            var __eventArgs__ = MessageBrokerEventArgs.Pool<MessageBrokerEventArgs>.Rent();
            __eventArgs__.Sender = sender;
            __eventArgs__.Target = target;
            OnLoadLatestGame?.Invoke(sender, __eventArgs__);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Send_OnQuitGame(object sender, object target)
        {
            if (sender == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Menus", target, "sender");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            if (target == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Menus", target, "target");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            var __eventArgs__ = MessageBrokerEventArgs.Pool<MessageBrokerEventArgs>.Rent();
            __eventArgs__.Sender = sender;
            __eventArgs__.Target = target;
            OnQuitGame?.Invoke(sender, __eventArgs__);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Send_OnStartGame(object sender, object target)
        {
            if (sender == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Menus", target, "sender");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            if (target == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Menus", target, "target");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            var __eventArgs__ = MessageBrokerEventArgs.Pool<MessageBrokerEventArgs>.Rent();
            __eventArgs__.Sender = sender;
            __eventArgs__.Target = target;
            OnStartGame?.Invoke(sender, __eventArgs__);
        }
    }
}