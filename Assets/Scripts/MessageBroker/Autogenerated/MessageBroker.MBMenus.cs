//------------------------------------------------------------------------------
// <auto-generated>
// Code auto-generated by MessageBrokerGenerator version <version undefined>.
// Re-run the generator every time a new Message is added or removed.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using UnityEngine;
using UnityEditor;

namespace DeeDeeR.MessageBroker
{
	/// <summary>
	/// MessageBroker publisher for Menus category.
	/// </summary>
	 public class MBMenus
	{
		#region Event declaration

		/// <summary>
		/// 
		/// </summary>
		public event Action<object, object, Infrastructure.SaveManager.SaveGameData> LoadGame;

		/// <summary>
		/// 
		/// </summary>
		public event Action<object, object> LoadLatestGame;

		/// <summary>
		/// 
		/// </summary>
		public event Action<object, object> StartGame;


		#endregion

		#region Send methods

		/// <summary>
		/// Send a message of type LoadGame.
		/// <param name="sender">The sender of the message. Required.</param>
		/// <param name="target">The target of the message. Optional.</param>
		/// <param name="saveGameData">The savegame data structure containing the game data to load</param>
		/// </summary>
		public void Send_LoadGame(object sender, object target, Infrastructure.SaveManager.SaveGameData saveGameData)
		{
			if (sender == null)
			{
				Debug.LogError("sender is required.");
				return;
			}

			LoadGame?.Invoke(sender, target, saveGameData);
		}

		/// <summary>
		/// Send a message of type LoadLatestGame.
		/// <param name="sender">The sender of the message. Required.</param>
		/// <param name="target">The target of the message. Optional.</param>
		/// </summary>
		public void Send_LoadLatestGame(object sender, object target)
		{
			if (sender == null)
			{
				Debug.LogError("sender is required.");
				return;
			}

			LoadLatestGame?.Invoke(sender, target);
		}

		/// <summary>
		/// Send a message of type StartGame.
		/// <param name="sender">The sender of the message. Required.</param>
		/// <param name="target">The target of the message. Optional.</param>
		/// </summary>
		public void Send_StartGame(object sender, object target)
		{
			if (sender == null)
			{
				Debug.LogError("sender is required.");
				return;
			}

			StartGame?.Invoke(sender, target);
		}


		#endregion

	}
}
