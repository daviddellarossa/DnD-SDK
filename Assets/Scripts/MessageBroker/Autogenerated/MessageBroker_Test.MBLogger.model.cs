//------------------------------------------------------------------------------
// <auto-generated>
// Code auto-generated by CategoryGenerator version <version undefined>.
// Re-run the generator every time a new Message is added or removed.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using MessageBroker;
using UnityEngine;
using UnityEditor;

namespace DeeDeeR.MessageBroker
{
    public class Logger_Test
    {
        public event EventHandler<LoggerMessageBrokerEventArgs> OnLog;
        public event EventHandler<ExceptionMessageBrokerEventArgs> OnLogException;
        
        public void Send_OnLog(object sender, object target, string message)
        {
            if (sender == null)
            {
                var parameterName = nameof(sender);
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs(nameof(Logger_Test), target, nameof(parameterName));
                
                //DeeDeeR.MessageBroker.MessageBroker.Instance.Logger_Test.Send_OnLogException(sender, target, errorEventArgs);
                return;
                
                OnLogException?.Invoke(sender, errorEventArgs);
                return;
            }
            
            var eventArgs = MessageBrokerEventArgs.Pool<LoggerMessageBrokerEventArgs>.Rent();
            eventArgs.Sender = sender;
            eventArgs.Target = target;
            eventArgs.Message = message;

            OnLog?.Invoke(sender, eventArgs);
        }
        
        public void Send_OnLogException(object sender, object target, Exception exception)
        {
            if (sender == null)
            {
                var parameterName = nameof(sender);
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs(nameof(Logger_Test), target, nameof(parameterName), exception);
                
                //DeeDeeR.MessageBroker.MessageBroker.Instance.Logger_Test.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }
            
            var eventArgs = MessageBrokerEventArgs.Pool<ExceptionMessageBrokerEventArgs>.Rent();
            eventArgs.Sender = sender;
            eventArgs.Target = target;
            eventArgs.Exception = exception;

            OnLogException?.Invoke(sender, eventArgs);
        }
    }
    
    public class LoggerMessageBrokerEventArgs : MessageBrokerEventArgs, IResettable
    {
        public string Message { get; set; }

        // Reset custom state
        public void ResetState()
        {
            Message = null;
        }
    }
}