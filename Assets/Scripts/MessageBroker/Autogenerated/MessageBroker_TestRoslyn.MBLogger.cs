//------------------------------------------------------------------------------
// <auto-generated>
// Code auto-generated by CategoryGenerator version <version undefined>.
// Re-run the generator every time a new Message is added or removed.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using UnityEditor;
using MessageBroker;
using System.Collections.Generic;

namespace DeeDeeR.MessageBroker
{
    /// <summary>
    /// 
    /// </summary>
    public class LogEventArgs : MessageBrokerEventArgs, IResettable
    {
        public string Message { get; set; }
        public UnityEngine.LogType LogLevel { get; set; }

        /// <inheritdoc cref = "IResettable.ResetState"/>
        public void ResetState()
        {
            this.Message = default;
            this.LogLevel = default;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public class LogExceptionEventArgs : MessageBrokerEventArgs, IResettable
    {
        public DeeDeeR.MessageBroker.ExceptionMessageBrokerEventArgs ExceptionMessageEventArgs { get; set; }

        /// <inheritdoc cref = "IResettable.ResetState"/>
        public void ResetState()
        {
            this.ExceptionMessageEventArgs = default;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public class MBLogger
    {
        /// <summary>
        /// 
        /// </summary>
        public event EventHandler<LogEventArgs> OnLog;
        /// <summary>
        /// 
        /// </summary>
        public event EventHandler<LogExceptionEventArgs> OnLogException;
        /// <summary>
        /// 
        /// </summary>
        public void Send_OnLog(object sender, object target, string message, UnityEngine.LogType logLevel)
        {
            if (sender == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Logger", target, "sender");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            if (target == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Logger", target, "target");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            if (message == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Logger", target, "message");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            if (logLevel == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Logger", target, "logLevel");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            var __eventArgs__ = MessageBrokerEventArgs.Pool<LogEventArgs>.Rent();
            __eventArgs__.Sender = sender;
            __eventArgs__.Target = target;
            __eventArgs__.Message = message;
            __eventArgs__.LogLevel = logLevel;
            OnLog?.Invoke(sender, __eventArgs__);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Send_OnLogException(object sender, object target, DeeDeeR.MessageBroker.ExceptionMessageBrokerEventArgs exceptionMessageEventArgs)
        {
            if (sender == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Logger", target, "sender");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            if (target == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Logger", target, "target");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            if (exceptionMessageEventArgs == null)
            {
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs("Logger", target, "exceptionMessageEventArgs");
                DeeDeeR.MessageBroker.MessageBroker.Instance.Logger.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            var __eventArgs__ = MessageBrokerEventArgs.Pool<LogExceptionEventArgs>.Rent();
            __eventArgs__.Sender = sender;
            __eventArgs__.Target = target;
            __eventArgs__.ExceptionMessageEventArgs = exceptionMessageEventArgs;
            OnLogException?.Invoke(sender, __eventArgs__);
        }
    }
}