//------------------------------------------------------------------------------
// <auto-generated>
// Code auto-generated by CategoryGenerator version <version undefined>.
// Re-run the generator every time a new Message is added or removed.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using MessageBroker;
using UnityEngine;
using UnityEditor;

namespace DeeDeeR.MessageBroker
{
    public class Menus_Test
    {
        public event EventHandler OnBackToMainMenu;
        public event EventHandler OnLoadGame;
        public event EventHandler OnLoadLatestGame;
        public event EventHandler OnQuitGame;
        public event EventHandler OnStartGame;
        
        public void Send_OnBackToMainMenu(object sender, object target)
        {
            if (sender == null)
            {
                var parameterName = nameof(sender);
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs(nameof(Menus_Test), target, nameof(parameterName));
                
                //DeeDeeR.MessageBroker.MessageBroker.Instance.Logger_Test.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }
            
            var eventArgs = MessageBrokerEventArgs.Pool<MessageBrokerEventArgs>.Rent();
            eventArgs.Sender = sender;
            eventArgs.Target = target;

            OnBackToMainMenu.Invoke(sender, eventArgs);
        }

        public void Send_OnLoadGame(object sender, object target, Infrastructure.SaveManager.SaveGameData saveGameData)
        {
            if (sender == null)
            {
                var parameterName = nameof(sender);
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs(nameof(Menus_Test), target, nameof(parameterName));
                
                //DeeDeeR.MessageBroker.MessageBroker.Instance.Logger_Test.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            var eventArgs = MessageBrokerEventArgs.Pool<SaveGameMessageBrokerEventArgs>.Rent();
            eventArgs.Sender = sender;
            eventArgs.Target = target;
            eventArgs.SaveGameData = saveGameData;

            OnLoadGame?.Invoke(sender, eventArgs);
        }

        public void Send_OnLoadLatestGame(object sender, object target)
        {
            if (sender == null)
            {
                var parameterName = nameof(sender);
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs(nameof(Menus_Test), target, nameof(parameterName));
                
                //DeeDeeR.MessageBroker.MessageBroker.Instance.Logger_Test.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            var eventArgs = MessageBrokerEventArgs.Pool<MessageBrokerEventArgs>.Rent();
            eventArgs.Sender = sender;
            eventArgs.Target = target;

            OnLoadLatestGame?.Invoke(sender, eventArgs);
        }

        public void Send_OnQuitGame(object sender, object target)
        {
            if (sender == null)
            {
                var parameterName = nameof(sender);
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs(nameof(Menus_Test), target, nameof(parameterName));
                
                //DeeDeeR.MessageBroker.MessageBroker.Instance.Logger_Test.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            var eventArgs = MessageBrokerEventArgs.Pool<MessageBrokerEventArgs>.Rent();
            eventArgs.Sender = sender;
            eventArgs.Target = target;

            OnQuitGame?.Invoke(sender, eventArgs);
        }

        public void Send_OnStartGame(object sender, object target)
        {
            if (sender == null)
            {
                var parameterName = nameof(sender);
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs(nameof(Menus_Test), target, nameof(parameterName));
                
                //DeeDeeR.MessageBroker.MessageBroker.Instance.Logger_Test.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            var eventArgs = MessageBrokerEventArgs.Pool<MessageBrokerEventArgs>.Rent();
            eventArgs.Sender = sender;
            eventArgs.Target = target;

            OnStartGame?.Invoke(sender, eventArgs);
        }
    }
    
    // Example derived class
    public class SaveGameMessageBrokerEventArgs : MessageBrokerEventArgs, IResettable
    {
        public Infrastructure.SaveManager.SaveGameData SaveGameData { get; set; }

        // Reset custom state
        public void ResetState()
        {
            SaveGameData = null;
        }
    }
}