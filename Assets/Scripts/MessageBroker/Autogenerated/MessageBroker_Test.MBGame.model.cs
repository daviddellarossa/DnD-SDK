//------------------------------------------------------------------------------
// <auto-generated>
// Code auto-generated by CategoryGenerator version <version undefined>.
// Re-run the generator every time a new Message is added or removed.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using MessageBroker;
using UnityEngine;
using UnityEditor;

namespace DeeDeeR.MessageBroker
{
    public class MBGame_Test
    {
        #region Event declaration

        /// <summary>
        /// Description for onGameOver
        /// </summary>
        public event EventHandler<MessageBrokerEventArgs> OnGameOver;
        
        
        /// <summary>
        /// Description for OnGamePaused
        /// </summary>
        public event EventHandler<MessageBrokerEventArgs> OnGamePaused;
        
        /// <summary>
        /// Description for OnGameResumed
        /// </summary>
        public event EventHandler<MessageBrokerEventArgs> OnGameResumed;
        
        /// <summary>
        /// Description for OnGameStarted
        /// </summary>
        public event EventHandler<MessageBrokerEventArgs> OnGameStarted;
        
        #endregion

        #region Send methods

        /// <summary>
        /// Send a message of type GameOver.
        /// <param name="sender">The sender of the message. Required.</param>
        /// <param name="target">The target of the message. Optional.</param>
        /// </summary>
        public void Send_OnGameOver(object sender, object target)
        {
            if (sender == null)
            {
                var parameterName = nameof(sender);
                var errorEventArgs = Common.CreateExceptionEventArgs(nameof(MBGame_Test), target, new ArgumentNullException(parameterName, $"Parameter {parameterName} is required."));
                
                //DeeDeeR.MessageBroker.MessageBroker.Instance.Logger_Test.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            var eventHandler = new MessageBrokerEventArgs(sender, target);

            OnGameOver?.Invoke(sender, eventHandler);
        }

        /// <summary>
        /// Send a message of type GamePaused.
        /// <param name="sender">The sender of the message. Required.</param>
        /// <param name="target">The target of the message. Optional.</param>
        /// </summary>
        public void Send_OnGamePaused(object sender, object target)
        {
            if (sender == null)
            {
                var parameterName = nameof(sender);
                var errorEventArgs = Common.CreateExceptionEventArgs(nameof(MBGame_Test), target, new ArgumentNullException(parameterName, $"Parameter {parameterName} is required."));
                
                //DeeDeeR.MessageBroker.MessageBroker.Instance.Logger_Test.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            var eventHandler = new MessageBrokerEventArgs(sender, target);

            OnGamePaused?.Invoke(sender, eventHandler);
        }

        /// <summary>
        /// Send a message of type GameResumed.
        /// <param name="sender">The sender of the message. Required.</param>
        /// <param name="target">The target of the message. Optional.</param>
        /// </summary>
        public void Send_OnGameResumed(object sender, object target)
        {
            if (sender == null)
            {
                var parameterName = nameof(sender);
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs(nameof(MBGame_Test), target, nameof(parameterName));
                
                //DeeDeeR.MessageBroker.MessageBroker.Instance.Logger_Test.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            var eventHandler = new MessageBrokerEventArgs(sender, target);

            OnGameResumed?.Invoke(sender, eventHandler);
        }

        /// <summary>
        /// Send a message of type GameStarted.
        /// <param name="sender">The sender of the message. Required.</param>
        /// <param name="target">The target of the message. Optional.</param>
        /// </summary>
        public void Send_OnGameStarted(object sender, object target)
        {
            if (sender == null)
            {
                var parameterName = nameof(sender);
                var errorEventArgs = Common.CreateArgumentNullExceptionEventArgs(nameof(MBGame_Test), target, nameof(parameterName));

                //DeeDeeR.MessageBroker.MessageBroker.Instance.Logger_Test.Send_OnLogException(sender, target, errorEventArgs);
                return;
            }

            var eventHandler = new MessageBrokerEventArgs(sender, target);

            OnGameStarted?.Invoke(sender, eventHandler);
        }
        
        #endregion
    }
}