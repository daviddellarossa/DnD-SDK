using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MessageBroker.Editor
{
    public static partial class MessageBrokerGenerator
    {

        internal class MessageBrokerInterfaceGenerator
        {
            private readonly IEnumerable<MessageInfo> messageInfos;

            public MessageBrokerInterfaceGenerator(IEnumerable<MessageInfo> messageInfos)
            {
                this.messageInfos = messageInfos;
            }

            internal void Generate()
            {
                var messageInfosGroupedByCategory = messageInfos.GroupBy(x => x.Message.MessageCategory);

                var stringBuilder = new StringBuilder();

                Indent.Init();

                AddHeader(stringBuilder);

                AddUsings(stringBuilder);

                OpenNamespace(stringBuilder);

                OpenInterfaceDeclaration(stringBuilder);

                AddPublicProperties(messageInfosGroupedByCategory, stringBuilder);

                CloseInterfaceDeclaration(stringBuilder);

                CloseNamespace(stringBuilder);

                CreateFile(stringBuilder);

            }

            private void AddHeader(StringBuilder stringBuilder)
            {

                stringBuilder.AppendLine("//------------------------------------------------------------------------------");
                stringBuilder.AppendLine("// <auto-generated>");
                stringBuilder.AppendLine($"// Code auto-generated by {nameof(global::MessageBroker.Editor.MessageBrokerGenerator)}");
                stringBuilder.AppendLine($"// Re-run the generator every time a new {nameof(Message)} is added or removed.");
                stringBuilder.AppendLine("// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.");
                stringBuilder.AppendLine("// </auto-generated>");
                stringBuilder.AppendLine("//------------------------------------------------------------------------------");

                stringBuilder.AppendLine();
            }

            private void AddUsings(StringBuilder stringBuilder)
            {
                //sb.AppendLine($"using UnityEngine;");
                //sb.AppendLine();
            }

            private void OpenNamespace(StringBuilder stringBuilder)
            {
                stringBuilder.AppendLine($"namespace {_namespace}");
                stringBuilder.AppendLine($"{{");
                Indent.Push();
            }

            private void CloseNamespace(StringBuilder stringBuilder)
            {
                stringBuilder.AppendLine($"{Indent.Pop()}}}");
            }

            private void OpenInterfaceDeclaration(StringBuilder stringBuilder)
            {
                stringBuilder.AppendLine($"{Indent.Get()}/// <summary>");
                stringBuilder.AppendLine($"{Indent.Get()}/// Interface for the Message Broker component.");
                stringBuilder.AppendLine($"{Indent.Get()}/// </summary>");
                stringBuilder.AppendLine($"{Indent.Get()}public interface I{ClassName}");
                stringBuilder.AppendLine($"{Indent.Get()}{{");
            }

            private void AddPublicProperties(IEnumerable<IGrouping<string, MessageInfo>> groups, StringBuilder stringBuilder)
            {
                Indent.Push();
                foreach (var group in groups)
                {
                    var categoryName = CleanName(string.IsNullOrWhiteSpace(group.Key) ? "Unnamed" : group.Key);

                    stringBuilder.AppendLine($"{Indent.Get()}/// <summary>");
                    stringBuilder.AppendLine($"{Indent.Get()}/// Message Broker for `{categoryName}` category");
                    stringBuilder.AppendLine($"{Indent.Get()}/// </summary>");
                    stringBuilder.AppendLine($"{Indent.Get()}{_categoryPrefix}{categoryName} {categoryName} {{ get; }}");
                    stringBuilder.AppendLine();
                }
                Indent.Pop();
            }

            private void CloseInterfaceDeclaration(StringBuilder stringBuilder)
            {
                stringBuilder.AppendLine($"{Indent.Get()}}}");
            }

            private void CreateFile(StringBuilder stringBuilder)
            {
                var outputPath = System.IO.Path.Combine(_outputFolder, $"I{ClassName}.cs");

                System.IO.File.WriteAllText(outputPath, stringBuilder.ToString());
            }

        }
    }
}