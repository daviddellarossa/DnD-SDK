using System;
using System.Collections.Generic;
using System.Linq;
using DeeDeeR.MessageBroker;
using Microsoft.CodeAnalysis; // Core Roslyn APIs
using Microsoft.CodeAnalysis.CSharp; // C#-specific APIs
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace MessageBroker.Editor
{
    public static partial class MessageBrokerGenerator
    {
        internal class ClassGenerator
        {
            private static readonly string ComponentMenuPath = "DeeDeeR/Message Broker/Message Broker";
            private static readonly string SummaryMessage = "Message Broker component exposing methods to send messages defined as ScriptableObjects of type";
            private readonly string[] _categories;
            
            public ClassGenerator(string[] categories)
            {
                this._categories = categories;
            }
            
            internal void Generate()
            {
                var messageBrokerClass = GenerateMessageBrokerClass(_categories);
                
                var usings = GetUsings();
                var @namespace = NamespaceDeclaration(ParseName(_namespace))
                    .AddMembers(messageBrokerClass);
                
                var compilationUnit = CompilationUnit()
                    .AddUsings(usings)
                    .AddMembers(@namespace)
                    .NormalizeWhitespace();

                var outputPath = System.IO.Path.Combine(_outputFolder, ClassFilename);
                this.CreateFile(compilationUnit.ToFullString(), outputPath);
            }
            
            private static string ClassName => $"{nameof(MessageBroker)}";
            private static string ClassFilename => $"{ClassName}.g.cs";
            
            private void CreateFile(string fileContent, string outputPath)
            {
                if (!System.IO.Directory.Exists(_outputFolder))
                {
                    System.IO.Directory.CreateDirectory(_outputFolder);
                }

                System.IO.File.WriteAllText(outputPath, fileContent);
            }
            
            private UsingDirectiveSyntax[] GetUsings()
            {
                return new[]
                {
                    UsingDirective(ParseName("System"))
                        .WithUsingKeyword(
                            Token(
                                GetHeader(),
                                SyntaxKind.UsingKeyword,
                                TriviaList())),
                    UsingDirective(ParseName("MessageBroker")),
                    UsingDirective(ParseName("UnityEngine")),
                };
            }
            
            private static SyntaxTriviaList GetHeader()
            {
                return TriviaList(
                    Comment("//------------------------------------------------------------------------------"),
                    Comment("// <auto-generated>"),
                    Comment($"// Code auto-generated by {nameof(CategoryGenerator)} version {MessageBrokerGenerator._packageVersion}."),
                    Comment($"// Re-run the generator every time a new {nameof(Message)} is added or removed."),
                    Comment("// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated."),
                    Comment("// </auto-generated>"),
                    Comment("//------------------------------------------------------------------------------"),
                    ElasticCarriageReturnLineFeed // add a blank line
                );
            }

            private ClassDeclarationSyntax GenerateMessageBrokerClass(string[] categories)
            {
                var @class = ClassDeclaration(ClassName)
                    .WithAttributeLists(GetAttributeLists())
                    .WithModifiers(
                        TokenList(
                            new []{
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.SealedKeyword),
                                Token(SyntaxKind.PartialKeyword)}))
                    .WithBaseList(
                        BaseList(
                            SeparatedList<BaseTypeSyntax>(
                                new SyntaxNodeOrToken[]{
                                    SimpleBaseType(
                                        IdentifierName(nameof(UnityEngine.MonoBehaviour))),
                                    Token(SyntaxKind.CommaToken),
                                    SimpleBaseType(
                                        IdentifierName(nameof(IMessageBroker)))})))

                    .WithMembers(List(GetProperties(categories.ToArray())));
                
                return @class;
            }

            private static SyntaxList<AttributeListSyntax> GetAttributeLists()
            {
                return SingletonList(
                    AttributeList(
                            SingletonSeparatedList(
                                Attribute(
                                        IdentifierName( nameof(UnityEngine.AddComponentMenu)))
                                    .WithArgumentList(
                                        AttributeArgumentList(
                                            SingletonSeparatedList(
                                                AttributeArgument(
                                                    LiteralExpression(
                                                        SyntaxKind.StringLiteralExpression,
                                                        Literal(ComponentMenuPath))))))))
                        .WithOpenBracketToken(
                            Token(
                                TriviaList(
                                    Trivia(
                                        DocumentationCommentTrivia(
                                            SyntaxKind.SingleLineDocumentationCommentTrivia,
                                            List(
                                                new XmlNodeSyntax[]{
                                                    XmlText()
                                                        .WithTextTokens(
                                                            TokenList(
                                                                XmlTextLiteral(
                                                                    TriviaList(
                                                                        DocumentationCommentExterior("///")),
                                                                    " ",
                                                                    " ",
                                                                    TriviaList()))),
                                                    XmlExampleElement(
                                                            XmlText()
                                                                .WithTextTokens(
                                                                    TokenList(
                                                                        new []{
                                                                            XmlTextNewLine(
                                                                                TriviaList(),
                                                                                Environment.NewLine,
                                                                                Environment.NewLine,
                                                                                TriviaList()),
                                                                            XmlTextLiteral(
                                                                                TriviaList(
                                                                                    DocumentationCommentExterior("\t///")),
                                                                                $" {SummaryMessage}",
                                                                                $" {SummaryMessage}",
                                                                                TriviaList())})),
                                                            XmlNullKeywordElement()
                                                                .WithAttributes(
                                                                    SingletonList<XmlAttributeSyntax>(
                                                                        XmlCrefAttribute(
                                                                            NameMemberCref(
                                                                                IdentifierName(nameof(Message)))))),
                                                            XmlText()
                                                                .WithTextTokens(
                                                                    TokenList(
                                                                        new []{
                                                                            XmlTextLiteral(
                                                                                TriviaList(),
                                                                                ".",
                                                                                ".",
                                                                                TriviaList()),
                                                                            XmlTextNewLine(
                                                                                TriviaList(),
                                                                                Environment.NewLine,
                                                                                Environment.NewLine,
                                                                                TriviaList()),
                                                                            XmlTextLiteral(
                                                                                TriviaList(
                                                                                    DocumentationCommentExterior("\t///")),
                                                                                " ",
                                                                                " ",
                                                                                TriviaList())})))
                                                        .WithStartTag(
                                                            XmlElementStartTag(
                                                                XmlName(
                                                                    Identifier("summary"))))
                                                        .WithEndTag(
                                                            XmlElementEndTag(
                                                                XmlName(
                                                                    Identifier("summary")))),
                                                    XmlText()
                                                        .WithTextTokens(
                                                            TokenList(
                                                                XmlTextNewLine(
                                                                    TriviaList(),
                                                                    Environment.NewLine,
                                                                    Environment.NewLine,
                                                                    TriviaList())))})))),
                                SyntaxKind.OpenBracketToken,
                                TriviaList())));
            }

            private IEnumerable<MemberDeclarationSyntax> GetProperties(string[] categories)
            {
                return categories.Select(category =>
                {
                    var propertyTypeString = $"{_categoryPrefix}{category}";
                    var propertyName = $"{category}";
                    return PropertyDeclaration(
                            IdentifierName(propertyTypeString),
                            Identifier(propertyName))
                        .WithModifiers(
                            TokenList(
                                    Token(
                                        TriviaList(
                                            Trivia(
                                                GetPropertySummary())),
                                        SyntaxKind.PublicKeyword,
                                        TriviaList())))
                        .WithAccessorList(
                            AccessorList(
                                SingletonList(
                                    AccessorDeclaration(
                                            SyntaxKind.GetAccessorDeclaration)
                                        .WithSemicolonToken(
                                            Token(SyntaxKind.SemicolonToken)))))
                        .WithInitializer(
                            EqualsValueClause(
                                ObjectCreationExpression(
                                        IdentifierName(propertyTypeString))
                                    .WithArgumentList(
                                        ArgumentList())))
                        .WithSemicolonToken(
                            Token(SyntaxKind.SemicolonToken));
                });
            }

            private DocumentationCommentTriviaSyntax GetPropertySummary()
            {
                var summary = DocumentationCommentTrivia(
                    SyntaxKind.SingleLineDocumentationCommentTrivia,
                    List(
                        new XmlNodeSyntax[]
                        {
                            XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextLiteral(
                                            TriviaList(
                                                DocumentationCommentExterior("///")),
                                            " ",
                                            " ",
                                            TriviaList()))),
                            XmlEmptyElement(
                                XmlName(
                                        Identifier("inheritdoc"))),
                            XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextNewLine(
                                            TriviaList(),
                                            Environment.NewLine,
                                            Environment.NewLine,
                                            TriviaList())))
                        }));
                
                return summary;
            }
        }
    }
}