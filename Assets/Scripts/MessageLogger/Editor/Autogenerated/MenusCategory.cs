//------------------------------------------------------------------------------
// <auto-generated>
// Code auto-generated by CategoryGenerator version 0.0.0.
// Re-run the generator every time the Logger needs to be updated.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace MessageLogger.Editor
{
    internal class MenusCategory : MessageCategory
    {
        protected override void Subscribe()
        {
            var instance = DeeDeeR.MessageBroker.MessageBroker.Instance.Menus;
            instance.OnBackToMainMenu += Handle_OnBackToMainMenu;
            instance.OnLoadGame += Handle_OnLoadGame;
            instance.OnLoadLatestGame += Handle_OnLoadLatestGame;
            instance.OnQuitGame += Handle_OnQuitGame;
            instance.OnStartGame += Handle_OnStartGame;
        }

        protected override void Unsubscribe()
        {
            var instance = DeeDeeR.MessageBroker.MessageBroker.Instance.Menus;
            instance.OnBackToMainMenu -= Handle_OnBackToMainMenu;
            instance.OnLoadGame -= Handle_OnLoadGame;
            instance.OnLoadLatestGame -= Handle_OnLoadLatestGame;
            instance.OnQuitGame -= Handle_OnQuitGame;
            instance.OnStartGame -= Handle_OnStartGame;
        }

        private void Handle_OnBackToMainMenu(object sender, MessageBroker.MessageBrokerEventArgs e)
        {
            Logger.LogEvent(e);
        }

        private void Handle_OnLoadGame(object sender, DeeDeeR.MessageBroker.LoadGameEventArgs e)
        {
            Logger.LogEvent(e);
        }

        private void Handle_OnLoadLatestGame(object sender, MessageBroker.MessageBrokerEventArgs e)
        {
            Logger.LogEvent(e);
        }

        private void Handle_OnQuitGame(object sender, MessageBroker.MessageBrokerEventArgs e)
        {
            Logger.LogEvent(e);
        }

        private void Handle_OnStartGame(object sender, MessageBroker.MessageBrokerEventArgs e)
        {
            Logger.LogEvent(e);
        }
    }
}