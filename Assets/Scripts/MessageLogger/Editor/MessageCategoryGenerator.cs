using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace MessageLogger.Editor
{
    public class MessageCategoryGenerator : EditorWindow
    {
        private string outputPath = null;
        private string namespaceToScan = "DeeDeeR.MessageBroker";
        private string assemblyName = "Assembly-CSharp";
        private string outputNamespace = null;

        [MenuItem("DeeDeeR/Message Logger/Generate Message Categories")]
        public static void ShowWindow()
        {
            GetWindow<MessageCategoryGenerator>("Generate Message Categories");
        }
        
        private const string PrefKey_OutputPath = "MessageLogger.OutputPath";
        private const string PrefKey_Namespace = "MessageLogger.NamespaceToScan";
        private const string PrefKey_Assembly = "MessageLogger.AssemblyName";
        private const string PrefKey_OutputNamespace = "MessageLogger.OutputNamespace";

        private void CreateGUI()
        {
            var outputPathSavedValue = EditorPrefs.GetString(PrefKey_OutputPath, outputPath);
            var namespaceToScanSavedValue = EditorPrefs.GetString(PrefKey_Namespace, namespaceToScan);
            var outputNamespaceSavedValue = EditorPrefs.GetString(PrefKey_OutputNamespace, outputNamespace);
            var assemblyNameSavedValue = EditorPrefs.GetString(PrefKey_Assembly, assemblyName);

            if (!string.IsNullOrEmpty(outputPathSavedValue))
            {
                outputPath = outputPathSavedValue;
            }
            
            if (!string.IsNullOrEmpty(namespaceToScanSavedValue))
            {
                namespaceToScan = namespaceToScanSavedValue;
            }
            
            if (!string.IsNullOrEmpty(assemblyNameSavedValue))
            {
                assemblyName = assemblyNameSavedValue;
            }
            
            if (!string.IsNullOrEmpty(outputNamespaceSavedValue))
            {
                outputNamespace = outputNamespaceSavedValue;
            }
            
            if (string.IsNullOrEmpty(outputPath))
            {
                string scriptPath = AssetDatabase.GetAssetPath(MonoScript.FromScriptableObject(this));
                string directory = Path.GetDirectoryName(scriptPath);
                outputPath = directory?.Replace("\\", "/") + "/Autogenerated";
                if (!outputPath.StartsWith("Assets"))
                {
                    outputPath = "Assets/Autogenerated";
                }
            }
            if (string.IsNullOrEmpty(outputNamespace))
            {
                outputNamespace = "Autogenerated.MessageCategories";
            }
        }

        private void OnGUI()
        {
            // var outputPathSavedValue = EditorPrefs.GetString(PrefKey_OutputPath, outputPath);
            // var namespaceToScanSavedValue = EditorPrefs.GetString(PrefKey_Namespace, namespaceToScan);
            // var outputNamespaceSavedValue = EditorPrefs.GetString(PrefKey_OutputNamespace, outputNamespace);
            // var assemblyNameSavedValue = EditorPrefs.GetString(PrefKey_Assembly, assemblyName);
            //
            // if (!string.IsNullOrEmpty(outputPathSavedValue))
            // {
            //     outputPath = outputPathSavedValue;
            // }
            //
            // if (!string.IsNullOrEmpty(namespaceToScanSavedValue))
            // {
            //     namespaceToScan = namespaceToScanSavedValue;
            // }
            //
            // if (!string.IsNullOrEmpty(assemblyNameSavedValue))
            // {
            //     assemblyName = assemblyNameSavedValue;
            // }
            //
            // if (!string.IsNullOrEmpty(outputNamespaceSavedValue))
            // {
            //     outputNamespace = outputNamespaceSavedValue;
            // }
            //
            // if (string.IsNullOrEmpty(outputPath)) outputPath = EditorPrefs.GetString(PrefKey_OutputPath, outputPath);
            // if (string.IsNullOrEmpty(namespaceToScan)) namespaceToScan = EditorPrefs.GetString(PrefKey_Namespace, namespaceToScan);
            // if (string.IsNullOrEmpty(assemblyName)) assemblyName = EditorPrefs.GetString(PrefKey_Assembly, assemblyName);
            // if (string.IsNullOrEmpty(outputNamespace)) outputNamespace = EditorPrefs.GetString(PrefKey_OutputNamespace, outputNamespace);
            //

            GUILayout.Label("Auto-generate MessageCategory classes from MB* types.", EditorStyles.wordWrappedLabel);
            GUILayout.Space(10);

            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField("Output Path:", GUILayout.Width(80));
            outputPath = EditorGUILayout.TextField(outputPath);
            if (GUILayout.Button("...", GUILayout.Width(30)))
            {
                string selected = EditorUtility.OpenFolderPanel("Select Output Folder", Application.dataPath, "");
                if (!string.IsNullOrEmpty(selected))
                {
                    if (selected.StartsWith(Application.dataPath))
                    {
                        outputPath = "Assets" + selected.Substring(Application.dataPath.Length);
                    }
                    else
                    {
                        Debug.LogWarning("Selected path must be inside the Assets folder.");
                    }
                }
            }
            EditorGUILayout.EndHorizontal();

            namespaceToScan = EditorGUILayout.TextField("Namespace to Scan:", namespaceToScan);
            assemblyName = EditorGUILayout.TextField("Assembly Name:", assemblyName);

            outputNamespace = EditorGUILayout.TextField("Output Namespace:", outputNamespace);

            GUILayout.Space(10);
            if (GUILayout.Button("Generate Categories"))
            {
                EditorPrefs.SetString(PrefKey_OutputPath, outputPath);
                EditorPrefs.SetString(PrefKey_Namespace, namespaceToScan);
                EditorPrefs.SetString(PrefKey_Assembly, assemblyName);
                EditorPrefs.SetString(PrefKey_OutputNamespace, outputNamespace);
                
                GenerateCategories();
            }
        }

        private void GenerateCategories()
        {
            if (!Directory.Exists(outputPath))
            {
                Directory.CreateDirectory(outputPath);
            }

            Assembly assembly;
            try
            {
                assembly = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.GetName().Name == assemblyName);
                if (assembly == null)
                {
                    Debug.LogError($"Assembly '{assemblyName}' not found.");
                    return;
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"Failed to load assembly '{assemblyName}': {ex.Message}");
                return;
            }

            var types = assembly.GetTypes()
                .Where(t => t.IsClass && t.Namespace == namespaceToScan && t.Name.StartsWith("MB"));

            foreach (var type in types)
            {
                string categoryName = type.Name.Substring(2); // e.g., MBGame -> Game
                string className = categoryName + "Category";
                string brokerAccess = $"{namespaceToScan}.MessageBroker.Instance.{categoryName}";

                var events = type.GetEvents(BindingFlags.Public | BindingFlags.Instance);

                StringBuilder sb = new StringBuilder();
                sb.AppendLine("// Auto-generated MessageCategory");
                sb.AppendLine("using System;");
                sb.AppendLine();
                sb.AppendLine($"{Indent.Get()}namespace {outputNamespace}");
                sb.AppendLine($"{Indent.Get()}{{");
                sb.AppendLine($"{Indent.Push()}internal class " + className + " : MessageCategory");
                sb.AppendLine($"{Indent.Get()}{{");

                sb.AppendLine($"{Indent.Push()}protected override void Subscribe()");
                sb.AppendLine($"{Indent.Get()}{{");
                sb.AppendLine($"{Indent.Push()}var instance = {brokerAccess};");
                foreach (var evt in events)
                {
                    sb.AppendLine($"{Indent.Get()}instance.{evt.Name} += Handle_{evt.Name};");
                }
                sb.AppendLine($"{Indent.Pop()}}}");

                sb.AppendLine($"{Indent.Get()}protected override void Unsubscribe()");
                sb.AppendLine($"{Indent.Get()}{{");
                sb.AppendLine($"{Indent.Push()}var instance = {brokerAccess};");
                foreach (var evt in events)
                {
                    sb.AppendLine($"{Indent.Get()}instance.{evt.Name} -= Handle_{evt.Name};");
                }
                sb.AppendLine($"{Indent.Pop()}}}");

                foreach (var evt in events)
                {
                    var parameters = evt.EventHandlerType.GetMethod("Invoke")!.GetParameters();
                    string paramList = string.Join(", ", parameters.Select(p => p.ParameterType.FullName + " " + p.Name));
                    string paramNames = string.Join(", ", parameters.Select(p => p.Name));

                    string logMessage = parameters.Length > 2 && parameters[2].ParameterType == typeof(string) 
                        ? parameters[2].Name 
                        : $"\"{evt.Name.ToHumanReadable()}\"";
                    
                    sb.AppendLine();
                    sb.AppendLine($"{Indent.Get()}private void Handle_{evt.Name}({paramList})");
                    sb.AppendLine($"{Indent.Get()}{{");
                    sb.AppendLine($"{Indent.Push()}Logger.LogEvent({parameters[0].Name}?.ToString() ?? string.Empty, {parameters[1].Name}?.ToString() ?? string.Empty, {logMessage});");
                    sb.AppendLine($"{Indent.Pop()}}}");
                }

                sb.AppendLine($"{Indent.Pop()}}}");
                sb.AppendLine($"{Indent.Pop()}}}");
            
                string filePath = Path.Combine(outputPath, className + ".cs");
                File.WriteAllText(filePath, sb.ToString());
            }

            AssetDatabase.Refresh();
            Debug.Log("✅ MessageCategory classes generated.");
        }
    }

    public static class MessageExtensionMethods
    {
        public static string ToHumanReadable(this string input)
        {
            if (string.IsNullOrWhiteSpace(input))
                return string.Empty;

            var builder = new System.Text.StringBuilder();
            builder.Append(input[0]);

            for (int i = 1; i < input.Length; i++)
            {
                char current = input[i];
                char previous = input[i - 1];

                if (char.IsUpper(current) && !char.IsWhiteSpace(previous) && !char.IsUpper(previous))
                {
                    builder.Append(' ');
                }

                builder.Append(current);
            }

            return builder.ToString();
        }
    }
}
